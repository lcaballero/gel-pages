* Generating HTML with Go (not using templates)
  I wrote a library not too long ago that I called =gel= that generates
  HTML from within Go code.  The library doesn't use templates.  I
  wrote it years ago and kind of forgot about it.

  But recently, I've started getting a bit annoyed with [[https://pkg.go.dev/html/template@go1.18.3][Go Templates]].
  So, I looked to using =gel= on this latest rendition of the site.  I'll
  call it the July 2022 rendition, just to mark the date.

  This is the 3rd or 4th time I've written this site.  And for the
  record there was a [[https://pugjs.org/api/getting-started.html][Pug]] version, an [[https://orgmode.org/][org-mode]] using [[https://www.emacswiki.org/emacs/BatchMode][emacs batch]]
  conversion version, and, I think, a [[https://github.com/vannizhang/react-redux-boilerplate][react, redux, webpack]] version at
  some point as well.  This is the Gel version.

* What I like About this =gel= Version
  Having rewriten the site now, I have a new appreciation for =gel=.

  Just for clarity this is what using =gel= tends to look like:

  #+begin_src go
    title :=  Div(
      H2.Text("Before I Get Started"),
      H3(
        Text("Why did I sign up for "),
        XLink("https://bloggingfordevs.com/", "Blogging for Devs"),
        Text("?"),
      ),
      P.Text(`I signed up because I wanted to learn about blogging...`),
    )
  #+end_src

  And to output that =div= as bytes:

  #+begin_src go
    indent := NewIndent()
    buf := bytes.NewBufferString("")
    p.ToNode().WriteToIndented(indent, buf)
    fmt.Println(buf.String())
  #+end_src

  What I like about =gel= is that it's pure =go=.  I write =gel= directly
  from =go= functions and build components using custom structs that
  implement interfaces.  If I need to loop, I loop over things in =go.=
  If I need to do some string manipulation I can do it using the =go=
  SDK.

  A component/view might look something like this:

  #+begin_src go
    func (p *HtmlPage) ToNode() *Node {
      return Frag(
        HTML5(),
        Html(
          Head(
            Link.Atts("rel", "icon", "type", "image/png", "sizes", "16x16", "href", "/img/favicon-16x16.png"),
            Def(p.Styles, BaseCSS),
            Def(p.Scripts, BaseJS),
            Title(p.Title())
          ),
          Body(
            Div.Class("main").Add(
              Sidebar{},
              Div.Class("container shadow bg-1").Add(
                Div.Class("prose").Add(
                  p.Content,
                ),
              ),
              AuxFooter{}
              Debug{},
            ),
          ),
        ),
      ).ToNode()
    }
  #+end_src

  This function is an example of the interface used to turn a
  component into HTML.  The structs used in the snippet: =Sidebar=,
  =AuxFooter=, =Debug= implement a similar interface, and because of that
  =gel= accepts them as =Views= to =Add(...)= functions.

  Which means pages are =gel= Views that can be rendered as HTML via
  =gel=.  And since =gel= is simply a =go= library I have the full power of
  =go= to output those Views to disc in code.

  Of course, =gel= could be used in a web-server as well and the output
  could be written to an HTTP Response just like templates.  The
  downside there is that your rendering HTML on the server instead of
  client-side.

  So, to generate the static site I compile and execute the resulting
  binary.  I provide some flag parameters to tell it where to write
  files, the domain for sitemap creation, and specify a directory 
  where to write published posts, etc.  Pretty simple, really.

** A Quick Tangent to Talk about Labels
  Internally, I've decorated pages with labels.  In the future I could
  query for a set of pages using some kind of /label selector/ and
  render specifically that set of pages.

  I find labels better than the =tag= concept.  The difference being
  that labels are a /list/ of key/value pairs and tags are a list of
  values (text slugs).  With labels I still have tagging, but with
  better intent and extensibility.

  The label idea I borrowed from [[https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/][Kubernetes Labels and Selectors]].  My
  version though has multiple values for a single "key", and because
  of that I can use "tag" as a key, with multiple values, and so with
  labels recreate "tagging".

  I can also use labels to differentiate "posts" vs "drafts". I can
  categorize pages with labels to make views/components that lists
  that set of pages easily enough.

  For what it's worth, I've created labels using the =go=
  query-parameter type called [[https://pkg.go.dev/net/url#Values][Values]], and wrapped it with in a struct
  so I can chain calls to [[https://pkg.go.dev/net/url#Values.Add][Add]].

* Some Improvements to =gel=
  I've found a few things to change in a v2 of the library.
